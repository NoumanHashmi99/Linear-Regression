{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyOaA1luInih8DDVQxzHa7z6",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/NoumanHashmi99/Linear-Regression/blob/main/eda%20analysis%20and%20linear%20regression\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "metadata": {
        "id": "rpy0QHsMcMuP"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "import seaborn as sns\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "from sklearn.linear_model import LinearRegression\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.metrics import mean_squared_error\n",
        "from sklearn.metrics import r2_score"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "students_data=pd.read_csv('StudentsPerformance.csv')"
      ],
      "metadata": {
        "id": "-mQ5NlP4ceaP"
      },
      "execution_count": 6,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "students_data.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "ScJy2wogcxja",
        "outputId": "23636a25-7de6-49a8-f909-196739121814"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   gender race/ethnicity parental level of education  ... math score reading score  writing score\n",
              "0  female        group B           bachelor's degree  ...         72            72             74\n",
              "1  female        group C                some college  ...         69            90             88\n",
              "2  female        group B             master's degree  ...         90            95             93\n",
              "3    male        group A          associate's degree  ...         47            57             44\n",
              "4    male        group C                some college  ...         76            78             75\n",
              "\n",
              "[5 rows x 8 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-3f8a51c0-0689-4365-a2b7-f65d635ef732\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>gender</th>\n",
              "      <th>race/ethnicity</th>\n",
              "      <th>parental level of education</th>\n",
              "      <th>lunch</th>\n",
              "      <th>test preparation course</th>\n",
              "      <th>math score</th>\n",
              "      <th>reading score</th>\n",
              "      <th>writing score</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>female</td>\n",
              "      <td>group B</td>\n",
              "      <td>bachelor's degree</td>\n",
              "      <td>standard</td>\n",
              "      <td>none</td>\n",
              "      <td>72</td>\n",
              "      <td>72</td>\n",
              "      <td>74</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>female</td>\n",
              "      <td>group C</td>\n",
              "      <td>some college</td>\n",
              "      <td>standard</td>\n",
              "      <td>completed</td>\n",
              "      <td>69</td>\n",
              "      <td>90</td>\n",
              "      <td>88</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>female</td>\n",
              "      <td>group B</td>\n",
              "      <td>master's degree</td>\n",
              "      <td>standard</td>\n",
              "      <td>none</td>\n",
              "      <td>90</td>\n",
              "      <td>95</td>\n",
              "      <td>93</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>male</td>\n",
              "      <td>group A</td>\n",
              "      <td>associate's degree</td>\n",
              "      <td>free/reduced</td>\n",
              "      <td>none</td>\n",
              "      <td>47</td>\n",
              "      <td>57</td>\n",
              "      <td>44</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>male</td>\n",
              "      <td>group C</td>\n",
              "      <td>some college</td>\n",
              "      <td>standard</td>\n",
              "      <td>none</td>\n",
              "      <td>76</td>\n",
              "      <td>78</td>\n",
              "      <td>75</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3f8a51c0-0689-4365-a2b7-f65d635ef732')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-3f8a51c0-0689-4365-a2b7-f65d635ef732 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-3f8a51c0-0689-4365-a2b7-f65d635ef732');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-18cff138-24dc-4d46-9be6-c05d711316a2\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-18cff138-24dc-4d46-9be6-c05d711316a2')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-18cff138-24dc-4d46-9be6-c05d711316a2 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "students_data",
              "summary": "{\n  \"name\": \"students_data\",\n  \"rows\": 1000,\n  \"fields\": [\n    {\n      \"column\": \"gender\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"male\",\n          \"female\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"race/ethnicity\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"group C\",\n          \"group E\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"parental level of education\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 6,\n        \"samples\": [\n          \"bachelor's degree\",\n          \"some college\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"lunch\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"free/reduced\",\n          \"standard\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"test preparation course\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"completed\",\n          \"none\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"math score\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 15,\n        \"min\": 0,\n        \"max\": 100,\n        \"num_unique_values\": 81,\n        \"samples\": [\n          55,\n          72\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"reading score\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 14,\n        \"min\": 17,\n        \"max\": 100,\n        \"num_unique_values\": 72,\n        \"samples\": [\n          78,\n          23\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"writing score\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 15,\n        \"min\": 10,\n        \"max\": 100,\n        \"num_unique_values\": 77,\n        \"samples\": [\n          75,\n          76\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "students_data['Average_Score']=(students_data['math score']+students_data['reading score']+students_data['writing score'])/3"
      ],
      "metadata": {
        "id": "QUgGD1rrckKP"
      },
      "execution_count": 9,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "students_data['Average_Score']"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 458
        },
        "id": "rfjNY472dN0c",
        "outputId": "84078595-b344-4cef-af9e-171412161e5b"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0      72.666667\n",
              "1      82.333333\n",
              "2      92.666667\n",
              "3      49.333333\n",
              "4      76.333333\n",
              "         ...    \n",
              "995    94.000000\n",
              "996    57.333333\n",
              "997    65.000000\n",
              "998    74.333333\n",
              "999    83.000000\n",
              "Name: Average_Score, Length: 1000, dtype: float64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Average_Score</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>72.666667</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>82.333333</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>92.666667</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>49.333333</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>76.333333</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>995</th>\n",
              "      <td>94.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>996</th>\n",
              "      <td>57.333333</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>997</th>\n",
              "      <td>65.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>998</th>\n",
              "      <td>74.333333</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>999</th>\n",
              "      <td>83.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1000 rows × 1 columns</p>\n",
              "</div><br><label><b>dtype:</b> float64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "zWbVHRd1eZMQ",
        "outputId": "741695fc-0cc2-41e8-8346-b17898e5013d"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     gender race/ethnicity parental level of education  ... reading score writing score  Average_Score\n",
              "0    female        group B           bachelor's degree  ...            72            74      72.666667\n",
              "1    female        group C                some college  ...            90            88      82.333333\n",
              "2    female        group B             master's degree  ...            95            93      92.666667\n",
              "5    female        group B          associate's degree  ...            83            78      77.333333\n",
              "6    female        group B                some college  ...            95            92      91.666667\n",
              "..      ...            ...                         ...  ...           ...           ...            ...\n",
              "993  female        group D           bachelor's degree  ...            72            74      69.333333\n",
              "995  female        group E             master's degree  ...            99            95      94.000000\n",
              "997  female        group C                 high school  ...            71            65      65.000000\n",
              "998  female        group D                some college  ...            78            77      74.333333\n",
              "999  female        group D                some college  ...            86            86      83.000000\n",
              "\n",
              "[518 rows x 9 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-f09d1f60-7884-41af-b051-c07ad6aa5f09\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>gender</th>\n",
              "      <th>race/ethnicity</th>\n",
              "      <th>parental level of education</th>\n",
              "      <th>lunch</th>\n",
              "      <th>test preparation course</th>\n",
              "      <th>math score</th>\n",
              "      <th>reading score</th>\n",
              "      <th>writing score</th>\n",
              "      <th>Average_Score</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>female</td>\n",
              "      <td>group B</td>\n",
              "      <td>bachelor's degree</td>\n",
              "      <td>standard</td>\n",
              "      <td>none</td>\n",
              "      <td>72</td>\n",
              "      <td>72</td>\n",
              "      <td>74</td>\n",
              "      <td>72.666667</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>female</td>\n",
              "      <td>group C</td>\n",
              "      <td>some college</td>\n",
              "      <td>standard</td>\n",
              "      <td>completed</td>\n",
              "      <td>69</td>\n",
              "      <td>90</td>\n",
              "      <td>88</td>\n",
              "      <td>82.333333</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>female</td>\n",
              "      <td>group B</td>\n",
              "      <td>master's degree</td>\n",
              "      <td>standard</td>\n",
              "      <td>none</td>\n",
              "      <td>90</td>\n",
              "      <td>95</td>\n",
              "      <td>93</td>\n",
              "      <td>92.666667</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>female</td>\n",
              "      <td>group B</td>\n",
              "      <td>associate's degree</td>\n",
              "      <td>standard</td>\n",
              "      <td>none</td>\n",
              "      <td>71</td>\n",
              "      <td>83</td>\n",
              "      <td>78</td>\n",
              "      <td>77.333333</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>female</td>\n",
              "      <td>group B</td>\n",
              "      <td>some college</td>\n",
              "      <td>standard</td>\n",
              "      <td>completed</td>\n",
              "      <td>88</td>\n",
              "      <td>95</td>\n",
              "      <td>92</td>\n",
              "      <td>91.666667</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>993</th>\n",
              "      <td>female</td>\n",
              "      <td>group D</td>\n",
              "      <td>bachelor's degree</td>\n",
              "      <td>free/reduced</td>\n",
              "      <td>none</td>\n",
              "      <td>62</td>\n",
              "      <td>72</td>\n",
              "      <td>74</td>\n",
              "      <td>69.333333</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>995</th>\n",
              "      <td>female</td>\n",
              "      <td>group E</td>\n",
              "      <td>master's degree</td>\n",
              "      <td>standard</td>\n",
              "      <td>completed</td>\n",
              "      <td>88</td>\n",
              "      <td>99</td>\n",
              "      <td>95</td>\n",
              "      <td>94.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>997</th>\n",
              "      <td>female</td>\n",
              "      <td>group C</td>\n",
              "      <td>high school</td>\n",
              "      <td>free/reduced</td>\n",
              "      <td>completed</td>\n",
              "      <td>59</td>\n",
              "      <td>71</td>\n",
              "      <td>65</td>\n",
              "      <td>65.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>998</th>\n",
              "      <td>female</td>\n",
              "      <td>group D</td>\n",
              "      <td>some college</td>\n",
              "      <td>standard</td>\n",
              "      <td>completed</td>\n",
              "      <td>68</td>\n",
              "      <td>78</td>\n",
              "      <td>77</td>\n",
              "      <td>74.333333</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>999</th>\n",
              "      <td>female</td>\n",
              "      <td>group D</td>\n",
              "      <td>some college</td>\n",
              "      <td>free/reduced</td>\n",
              "      <td>none</td>\n",
              "      <td>77</td>\n",
              "      <td>86</td>\n",
              "      <td>86</td>\n",
              "      <td>83.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>518 rows × 9 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f09d1f60-7884-41af-b051-c07ad6aa5f09')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-f09d1f60-7884-41af-b051-c07ad6aa5f09 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-f09d1f60-7884-41af-b051-c07ad6aa5f09');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-9450b0e3-8c3a-45c5-9c86-133f41cf9158\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-9450b0e3-8c3a-45c5-9c86-133f41cf9158')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-9450b0e3-8c3a-45c5-9c86-133f41cf9158 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"students_data[students_data['gender']=='female']\",\n  \"rows\": 518,\n  \"fields\": [\n    {\n      \"column\": \"gender\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"female\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"race/ethnicity\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"group C\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"parental level of education\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 6,\n        \"samples\": [\n          \"bachelor's degree\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"lunch\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"free/reduced\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"test preparation course\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"completed\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"math score\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 15,\n        \"min\": 0,\n        \"max\": 100,\n        \"num_unique_values\": 79,\n        \"samples\": [\n          73\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"reading score\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 14,\n        \"min\": 17,\n        \"max\": 100,\n        \"num_unique_values\": 67,\n        \"samples\": [\n          66\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"writing score\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 14,\n        \"min\": 10,\n        \"max\": 100,\n        \"num_unique_values\": 69,\n        \"samples\": [\n          10\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Average_Score\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 14.54180913436781,\n        \"min\": 9.0,\n        \"max\": 100.0,\n        \"num_unique_values\": 168,\n        \"samples\": [\n          76.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 13
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def avg_marks(value):\n",
        "  if value == 'male':\n",
        "    return students_data[students_data['gender']=='male']['Average_Score'].mean()\n",
        "  elif value == 'female':\n",
        "    return students_data[students_data['gender']=='female']['Average_Score'].mean()"
      ],
      "metadata": {
        "id": "svsEIxzogkIm"
      },
      "execution_count": 21,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "avg_marks('male')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_MKyOUBFg1XP",
        "outputId": "b410d5b3-9e4b-4e65-d7b7-4910c9cf1284"
      },
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "65.8374827109267"
            ]
          },
          "metadata": {},
          "execution_count": 23
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "avg_marks('female')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "nr5Fkeetg8cl",
        "outputId": "1262063d-023d-4505-daf4-2f028cb420b3"
      },
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "69.56949806949807"
            ]
          },
          "metadata": {},
          "execution_count": 25
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def gender_data(value):\n",
        "  if value == 'male':\n",
        "    return students_data[students_data['gender']=='male']\n",
        "  elif value == 'female':\n",
        "    return students_data[students_data['gender']=='female']"
      ],
      "metadata": {
        "id": "yLm5ydbog_vS"
      },
      "execution_count": 37,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "male =gender_data('male')"
      ],
      "metadata": {
        "id": "NvnU04YYh_WA"
      },
      "execution_count": 39,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "plt.scatter(male['Average_Score'],male['math score'])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 447
        },
        "id": "6iOo8W_pieSp",
        "outputId": "91f77276-b296-4680-c2df-697e9834e7d5"
      },
      "execution_count": 41,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.collections.PathCollection at 0x79ba5e259810>"
            ]
          },
          "metadata": {},
          "execution_count": 41
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.scatter(male['Average_Score'],male['reading score'])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 447
        },
        "id": "_rHwmXY3jvvp",
        "outputId": "e4708188-09cc-4d93-9051-00fc2e0e399a"
      },
      "execution_count": 42,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.collections.PathCollection at 0x79ba5e657990>"
            ]
          },
          "metadata": {},
          "execution_count": 42
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "ALCLl-ikkezc"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "plt.scatter(male['Average_Score'],male['writing score'])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 447
        },
        "id": "AYrRvkV5kZxy",
        "outputId": "3931ad34-cdab-4a6b-aa0f-4a3194efc6ef"
      },
      "execution_count": 43,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.collections.PathCollection at 0x79ba5e2773d0>"
            ]
          },
          "metadata": {},
          "execution_count": 43
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "male"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "lnHTPXHgki0T",
        "outputId": "a79dc8b4-8361-4ff9-dffe-067a626f02f7"
      },
      "execution_count": 45,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    gender race/ethnicity parental level of education  ... reading score writing score  Average_Score\n",
              "3     male        group A          associate's degree  ...            57            44      49.333333\n",
              "4     male        group C                some college  ...            78            75      76.333333\n",
              "7     male        group B                some college  ...            43            39      40.666667\n",
              "8     male        group D                 high school  ...            64            67      65.000000\n",
              "10    male        group C          associate's degree  ...            54            52      54.666667\n",
              "..     ...            ...                         ...  ...           ...           ...            ...\n",
              "985   male        group A                 high school  ...            51            54      54.000000\n",
              "987   male        group E            some high school  ...            75            76      77.333333\n",
              "990   male        group E                 high school  ...            81            75      80.666667\n",
              "994   male        group A                 high school  ...            63            62      62.666667\n",
              "996   male        group C                 high school  ...            55            55      57.333333\n",
              "\n",
              "[482 rows x 9 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-03423895-9db1-45b0-a579-032f4a721e4e\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>gender</th>\n",
              "      <th>race/ethnicity</th>\n",
              "      <th>parental level of education</th>\n",
              "      <th>lunch</th>\n",
              "      <th>test preparation course</th>\n",
              "      <th>math score</th>\n",
              "      <th>reading score</th>\n",
              "      <th>writing score</th>\n",
              "      <th>Average_Score</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>male</td>\n",
              "      <td>group A</td>\n",
              "      <td>associate's degree</td>\n",
              "      <td>free/reduced</td>\n",
              "      <td>none</td>\n",
              "      <td>47</td>\n",
              "      <td>57</td>\n",
              "      <td>44</td>\n",
              "      <td>49.333333</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>male</td>\n",
              "      <td>group C</td>\n",
              "      <td>some college</td>\n",
              "      <td>standard</td>\n",
              "      <td>none</td>\n",
              "      <td>76</td>\n",
              "      <td>78</td>\n",
              "      <td>75</td>\n",
              "      <td>76.333333</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>male</td>\n",
              "      <td>group B</td>\n",
              "      <td>some college</td>\n",
              "      <td>free/reduced</td>\n",
              "      <td>none</td>\n",
              "      <td>40</td>\n",
              "      <td>43</td>\n",
              "      <td>39</td>\n",
              "      <td>40.666667</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>male</td>\n",
              "      <td>group D</td>\n",
              "      <td>high school</td>\n",
              "      <td>free/reduced</td>\n",
              "      <td>completed</td>\n",
              "      <td>64</td>\n",
              "      <td>64</td>\n",
              "      <td>67</td>\n",
              "      <td>65.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>male</td>\n",
              "      <td>group C</td>\n",
              "      <td>associate's degree</td>\n",
              "      <td>standard</td>\n",
              "      <td>none</td>\n",
              "      <td>58</td>\n",
              "      <td>54</td>\n",
              "      <td>52</td>\n",
              "      <td>54.666667</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>985</th>\n",
              "      <td>male</td>\n",
              "      <td>group A</td>\n",
              "      <td>high school</td>\n",
              "      <td>standard</td>\n",
              "      <td>none</td>\n",
              "      <td>57</td>\n",
              "      <td>51</td>\n",
              "      <td>54</td>\n",
              "      <td>54.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>987</th>\n",
              "      <td>male</td>\n",
              "      <td>group E</td>\n",
              "      <td>some high school</td>\n",
              "      <td>standard</td>\n",
              "      <td>completed</td>\n",
              "      <td>81</td>\n",
              "      <td>75</td>\n",
              "      <td>76</td>\n",
              "      <td>77.333333</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>990</th>\n",
              "      <td>male</td>\n",
              "      <td>group E</td>\n",
              "      <td>high school</td>\n",
              "      <td>free/reduced</td>\n",
              "      <td>completed</td>\n",
              "      <td>86</td>\n",
              "      <td>81</td>\n",
              "      <td>75</td>\n",
              "      <td>80.666667</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>994</th>\n",
              "      <td>male</td>\n",
              "      <td>group A</td>\n",
              "      <td>high school</td>\n",
              "      <td>standard</td>\n",
              "      <td>none</td>\n",
              "      <td>63</td>\n",
              "      <td>63</td>\n",
              "      <td>62</td>\n",
              "      <td>62.666667</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>996</th>\n",
              "      <td>male</td>\n",
              "      <td>group C</td>\n",
              "      <td>high school</td>\n",
              "      <td>free/reduced</td>\n",
              "      <td>none</td>\n",
              "      <td>62</td>\n",
              "      <td>55</td>\n",
              "      <td>55</td>\n",
              "      <td>57.333333</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>482 rows × 9 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-03423895-9db1-45b0-a579-032f4a721e4e')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-03423895-9db1-45b0-a579-032f4a721e4e button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-03423895-9db1-45b0-a579-032f4a721e4e');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-1e90d512-6043-4ee8-804d-a6b02482d368\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-1e90d512-6043-4ee8-804d-a6b02482d368')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-1e90d512-6043-4ee8-804d-a6b02482d368 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_d4310e44-160b-4f43-9ee6-931ff55cabf4\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('male')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_d4310e44-160b-4f43-9ee6-931ff55cabf4 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('male');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "male",
              "summary": "{\n  \"name\": \"male\",\n  \"rows\": 482,\n  \"fields\": [\n    {\n      \"column\": \"gender\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"male\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"race/ethnicity\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"group C\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"parental level of education\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 6,\n        \"samples\": [\n          \"associate's degree\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"lunch\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"standard\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"test preparation course\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"completed\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"math score\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 14,\n        \"min\": 27,\n        \"max\": 100,\n        \"num_unique_values\": 68,\n        \"samples\": [\n          83\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"reading score\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 13,\n        \"min\": 23,\n        \"max\": 100,\n        \"num_unique_values\": 65,\n        \"samples\": [\n          75\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"writing score\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 14,\n        \"min\": 15,\n        \"max\": 100,\n        \"num_unique_values\": 67,\n        \"samples\": [\n          50\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Average_Score\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 13.698840020421633,\n        \"min\": 23.0,\n        \"max\": 100.0,\n        \"num_unique_values\": 158,\n        \"samples\": [\n          92.66666666666667\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 45
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "female =gender_data('female')"
      ],
      "metadata": {
        "id": "cC52tWFgkuU2"
      },
      "execution_count": 46,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "male['test preparation course'].value_counts().plot(kind='bar',color='red')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 526
        },
        "id": "-cQIRQRMmSDw",
        "outputId": "e7189ab3-e26a-42fd-d91d-6563d7e34f3c"
      },
      "execution_count": 54,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: xlabel='test preparation course'>"
            ]
          },
          "metadata": {},
          "execution_count": 54
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "X = students_data[['reading score','writing score','math score']]"
      ],
      "metadata": {
        "id": "TIUxAjd8mgZP"
      },
      "execution_count": 56,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "y = students_data['Average_Score']"
      ],
      "metadata": {
        "id": "YII87b2WnRws"
      },
      "execution_count": 57,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "X_train, X_test , y_train , y_test = train_test_split(X,y,test_size=0.2,random_state=42)"
      ],
      "metadata": {
        "id": "yAeHCx1QnX68"
      },
      "execution_count": 58,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "Linear_model = LinearRegression()"
      ],
      "metadata": {
        "id": "DdSo1VtKnjQZ"
      },
      "execution_count": 59,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "Linear_model.fit(X_train,y_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 80
        },
        "id": "jtgCmcIcnv0P",
        "outputId": "93db78ea-d82b-4114-e47f-a40c42864f90"
      },
      "execution_count": 60,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "LinearRegression()"
            ],
            "text/html": [
              "<style>#sk-container-id-1 {\n",
              "  /* Definition of color scheme common for light and dark mode */\n",
              "  --sklearn-color-text: #000;\n",
              "  --sklearn-color-text-muted: #666;\n",
              "  --sklearn-color-line: gray;\n",
              "  /* Definition of color scheme for unfitted estimators */\n",
              "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
              "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
              "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
              "  --sklearn-color-unfitted-level-3: chocolate;\n",
              "  /* Definition of color scheme for fitted estimators */\n",
              "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
              "  --sklearn-color-fitted-level-1: #d4ebff;\n",
              "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
              "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
              "\n",
              "  /* Specific color for light theme */\n",
              "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
              "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-icon: #696969;\n",
              "\n",
              "  @media (prefers-color-scheme: dark) {\n",
              "    /* Redefinition of color scheme for dark theme */\n",
              "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
              "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-icon: #878787;\n",
              "  }\n",
              "}\n",
              "\n",
              "#sk-container-id-1 {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 pre {\n",
              "  padding: 0;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 input.sk-hidden--visually {\n",
              "  border: 0;\n",
              "  clip: rect(1px 1px 1px 1px);\n",
              "  clip: rect(1px, 1px, 1px, 1px);\n",
              "  height: 1px;\n",
              "  margin: -1px;\n",
              "  overflow: hidden;\n",
              "  padding: 0;\n",
              "  position: absolute;\n",
              "  width: 1px;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-dashed-wrapped {\n",
              "  border: 1px dashed var(--sklearn-color-line);\n",
              "  margin: 0 0.4em 0.5em 0.4em;\n",
              "  box-sizing: border-box;\n",
              "  padding-bottom: 0.4em;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-container {\n",
              "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
              "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
              "     so we also need the `!important` here to be able to override the\n",
              "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
              "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
              "  display: inline-block !important;\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-text-repr-fallback {\n",
              "  display: none;\n",
              "}\n",
              "\n",
              "div.sk-parallel-item,\n",
              "div.sk-serial,\n",
              "div.sk-item {\n",
              "  /* draw centered vertical line to link estimators */\n",
              "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
              "  background-size: 2px 100%;\n",
              "  background-repeat: no-repeat;\n",
              "  background-position: center center;\n",
              "}\n",
              "\n",
              "/* Parallel-specific style estimator block */\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item::after {\n",
              "  content: \"\";\n",
              "  width: 100%;\n",
              "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
              "  flex-grow: 1;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel {\n",
              "  display: flex;\n",
              "  align-items: stretch;\n",
              "  justify-content: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item:first-child::after {\n",
              "  align-self: flex-end;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item:last-child::after {\n",
              "  align-self: flex-start;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item:only-child::after {\n",
              "  width: 0;\n",
              "}\n",
              "\n",
              "/* Serial-specific style estimator block */\n",
              "\n",
              "#sk-container-id-1 div.sk-serial {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "  align-items: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  padding-right: 1em;\n",
              "  padding-left: 1em;\n",
              "}\n",
              "\n",
              "\n",
              "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
              "clickable and can be expanded/collapsed.\n",
              "- Pipeline and ColumnTransformer use this feature and define the default style\n",
              "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
              "*/\n",
              "\n",
              "/* Pipeline and ColumnTransformer style (default) */\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable {\n",
              "  /* Default theme specific background. It is overwritten whether we have a\n",
              "  specific estimator or a Pipeline/ColumnTransformer */\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "/* Toggleable label */\n",
              "#sk-container-id-1 label.sk-toggleable__label {\n",
              "  cursor: pointer;\n",
              "  display: flex;\n",
              "  width: 100%;\n",
              "  margin-bottom: 0;\n",
              "  padding: 0.5em;\n",
              "  box-sizing: border-box;\n",
              "  text-align: center;\n",
              "  align-items: start;\n",
              "  justify-content: space-between;\n",
              "  gap: 0.5em;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 label.sk-toggleable__label .caption {\n",
              "  font-size: 0.6rem;\n",
              "  font-weight: lighter;\n",
              "  color: var(--sklearn-color-text-muted);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 label.sk-toggleable__label-arrow:before {\n",
              "  /* Arrow on the left of the label */\n",
              "  content: \"▸\";\n",
              "  float: left;\n",
              "  margin-right: 0.25em;\n",
              "  color: var(--sklearn-color-icon);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "/* Toggleable content - dropdown */\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content {\n",
              "  max-height: 0;\n",
              "  max-width: 0;\n",
              "  overflow: hidden;\n",
              "  text-align: left;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content pre {\n",
              "  margin: 0.2em;\n",
              "  border-radius: 0.25em;\n",
              "  color: var(--sklearn-color-text);\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content.fitted pre {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
              "  /* Expand drop-down */\n",
              "  max-height: 200px;\n",
              "  max-width: 100%;\n",
              "  overflow: auto;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
              "  content: \"▾\";\n",
              "}\n",
              "\n",
              "/* Pipeline/ColumnTransformer-specific style */\n",
              "\n",
              "#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator-specific style */\n",
              "\n",
              "/* Colorize estimator box */\n",
              "#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-label label.sk-toggleable__label,\n",
              "#sk-container-id-1 div.sk-label label {\n",
              "  /* The background is the default theme color */\n",
              "  color: var(--sklearn-color-text-on-default-background);\n",
              "}\n",
              "\n",
              "/* On hover, darken the color of the background */\n",
              "#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "/* Label box, darken color on hover, fitted */\n",
              "#sk-container-id-1 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator label */\n",
              "\n",
              "#sk-container-id-1 div.sk-label label {\n",
              "  font-family: monospace;\n",
              "  font-weight: bold;\n",
              "  display: inline-block;\n",
              "  line-height: 1.2em;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-label-container {\n",
              "  text-align: center;\n",
              "}\n",
              "\n",
              "/* Estimator-specific */\n",
              "#sk-container-id-1 div.sk-estimator {\n",
              "  font-family: monospace;\n",
              "  border: 1px dotted var(--sklearn-color-border-box);\n",
              "  border-radius: 0.25em;\n",
              "  box-sizing: border-box;\n",
              "  margin-bottom: 0.5em;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-estimator.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "/* on hover */\n",
              "#sk-container-id-1 div.sk-estimator:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-estimator.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
              "\n",
              "/* Common style for \"i\" and \"?\" */\n",
              "\n",
              ".sk-estimator-doc-link,\n",
              "a:link.sk-estimator-doc-link,\n",
              "a:visited.sk-estimator-doc-link {\n",
              "  float: right;\n",
              "  font-size: smaller;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1em;\n",
              "  height: 1em;\n",
              "  width: 1em;\n",
              "  text-decoration: none !important;\n",
              "  margin-left: 0.5em;\n",
              "  text-align: center;\n",
              "  /* unfitted */\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted,\n",
              "a:link.sk-estimator-doc-link.fitted,\n",
              "a:visited.sk-estimator-doc-link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "/* Span, style for the box shown on hovering the info icon */\n",
              ".sk-estimator-doc-link span {\n",
              "  display: none;\n",
              "  z-index: 9999;\n",
              "  position: relative;\n",
              "  font-weight: normal;\n",
              "  right: .2ex;\n",
              "  padding: .5ex;\n",
              "  margin: .5ex;\n",
              "  width: min-content;\n",
              "  min-width: 20ex;\n",
              "  max-width: 50ex;\n",
              "  color: var(--sklearn-color-text);\n",
              "  box-shadow: 2pt 2pt 4pt #999;\n",
              "  /* unfitted */\n",
              "  background: var(--sklearn-color-unfitted-level-0);\n",
              "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted span {\n",
              "  /* fitted */\n",
              "  background: var(--sklearn-color-fitted-level-0);\n",
              "  border: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link:hover span {\n",
              "  display: block;\n",
              "}\n",
              "\n",
              "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
              "\n",
              "#sk-container-id-1 a.estimator_doc_link {\n",
              "  float: right;\n",
              "  font-size: 1rem;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1rem;\n",
              "  height: 1rem;\n",
              "  width: 1rem;\n",
              "  text-decoration: none;\n",
              "  /* unfitted */\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 a.estimator_doc_link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "#sk-container-id-1 a.estimator_doc_link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 a.estimator_doc_link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LinearRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>LinearRegression</div></div><div><a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.6/modules/generated/sklearn.linear_model.LinearRegression.html\">?<span>Documentation for LinearRegression</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></div></label><div class=\"sk-toggleable__content fitted\"><pre>LinearRegression()</pre></div> </div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 60
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "y_pred = Linear_model.predict(X_test)"
      ],
      "metadata": {
        "id": "jq21uzFiny7E"
      },
      "execution_count": 61,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "model_accuracy = r2_score(y_test,y_pred)"
      ],
      "metadata": {
        "id": "PMc-hNWGn7kz"
      },
      "execution_count": 62,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "model_accuracy"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "vpMPI6Xen-I-",
        "outputId": "d8b5f9d4-9f21-447e-f0f3-510090afc901"
      },
      "execution_count": 63,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "1.0"
            ]
          },
          "metadata": {},
          "execution_count": 63
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 287
        },
        "id": "ZY5Vi7D_n_od",
        "outputId": "3170d375-4a08-4511-fbe5-8e31961561f5"
      },
      "execution_count": 64,
      "outputs": [
        {
          "output_type": "error",
          "ename": "ValueError",
          "evalue": "could not convert string to float: 'female'",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-64-083ffd15f46f>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mstudents_data\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcorr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36mcorr\u001b[0;34m(self, method, min_periods, numeric_only)\u001b[0m\n\u001b[1;32m  11047\u001b[0m         \u001b[0mcols\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m  11048\u001b[0m         \u001b[0midx\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcols\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m> 11049\u001b[0;31m         \u001b[0mmat\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mto_numpy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mfloat\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mna_value\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnan\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m  11050\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m  11051\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mmethod\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m\"pearson\"\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36mto_numpy\u001b[0;34m(self, dtype, copy, na_value)\u001b[0m\n\u001b[1;32m   1991\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mdtype\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1992\u001b[0m             \u001b[0mdtype\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1993\u001b[0;31m         \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_mgr\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mas_array\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mna_value\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mna_value\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1994\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mresult\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdtype\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1995\u001b[0m             \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0masarray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mresult\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/core/internals/managers.py\u001b[0m in \u001b[0;36mas_array\u001b[0;34m(self, dtype, copy, na_value)\u001b[0m\n\u001b[1;32m   1692\u001b[0m                 \u001b[0marr\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mflags\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwriteable\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mFalse\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1693\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1694\u001b[0;31m             \u001b[0marr\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_interleave\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mna_value\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mna_value\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1695\u001b[0m             \u001b[0;31m# The underlying data was copied within _interleave, so no need\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1696\u001b[0m             \u001b[0;31m# to further copy if copy=True or setting na_value\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/core/internals/managers.py\u001b[0m in \u001b[0;36m_interleave\u001b[0;34m(self, dtype, na_value)\u001b[0m\n\u001b[1;32m   1751\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1752\u001b[0m                 \u001b[0marr\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mblk\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_values\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1753\u001b[0;31m             \u001b[0mresult\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mrl\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mindexer\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0marr\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1754\u001b[0m             \u001b[0mitemmask\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mrl\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mindexer\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1755\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mValueError\u001b[0m: could not convert string to float: 'female'"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "EkRNgGj3oFOn"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}